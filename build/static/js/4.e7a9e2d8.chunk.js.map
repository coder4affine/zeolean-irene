{"version":3,"sources":["component/TextInput/index.js","component/DropDown/index.js","screens/Users/index.js","actions/coursesAction.js","screens/Home/index.js"],"names":["index","_ref","field","_ref$form","form","touched","errors","title","props","Object","objectWithoutProperties","react_default","a","createElement","style","display","flex","flexDirection","margin","htmlFor","assign","type","name","data","value","map","item","key","id","concat","firstName","lastName","formData","component","CoursesSchema","object","shape","string","min","max","required","watchHref","authors","course","addCourse","closeDialog","formik_esm","enableReinitialize","initialValues","validationSchema","onSubmit","_ref2","asyncToGenerator","regenerator_default","mark","_callee","values","actions","wrap","_context","prev","next","then","stop","_x","_x2","apply","this","arguments","render","_ref3","handleSubmit","isSubmitting","console","log","apiFail","TextInput","DropDown","disabled","getData","dispatch","coursesApi","authorsApi","res","courses","types","fetch","sent","Promise","all","json","payload","t0","saveCourse","_callee2","url","_context2","headers","accept","Content-Type","method","body","JSON","stringify","setSubmitting","resetForm","setErrors","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","open","authorId","length","category","addCourses","setState","editCourse","_this2","_this$props","_this$state","onClick","className","href","Users","Component","connect","locale","changeLocale"],"mappings":"0KAmBeA,EAhBD,SAAAC,GAA2D,IAAxDC,EAAwDD,EAAxDC,MAAwDC,EAAAF,EAAjDG,KAAQC,EAAyCF,EAAzCE,QAASC,EAAgCH,EAAhCG,OAAUC,EAAsBN,EAAtBM,MAAUC,EAAYC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,0BACvE,OACEU,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,KAAM,EAAGC,cAAe,SAAUC,OAAQ,KACvEP,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,SAASZ,GACxBI,EAAAC,EAAAC,cAAA,QAAAJ,OAAAW,OAAA,CAAOC,KAAK,QAAWnB,EAAWM,IACjCF,EAAOgB,MAAQjB,EAAQiB,MAAQX,EAAAC,EAAAC,cAAA,WAAMP,EAAOgB,QCiBpCtB,EAtBD,SAAAC,GAAiE,IAA9DC,EAA8DD,EAA9DC,MAA8DC,EAAAF,EAAvDG,KAAQC,EAA+CF,EAA/CE,QAASC,EAAsCH,EAAtCG,OAAUiB,EAA4BtB,EAA5BsB,KAAMhB,EAAsBN,EAAtBM,MAAUC,EAAYC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,iCAC7E,OACEU,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,KAAM,EAAGC,cAAe,SAAUC,OAAQ,KACvEP,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,SAASZ,GACxBI,EAAAC,EAAAC,cAAA,SAAAJ,OAAAW,OAAA,GAAYlB,EAAWM,GACrBG,EAAAC,EAAAC,cAAA,UAAQW,MAAM,IAAd,iBACCD,GACCA,EAAKE,IAAI,SAAAC,GAAI,OACXf,EAAAC,EAAAC,cAAA,UAAQc,IAAKD,EAAKE,GAAIJ,MAAOE,EAAKE,IAAlC,GAAAC,OAA0CH,EAAKI,UAA/C,KAAAD,OAA4DH,EAAKK,cAGtEzB,EAAOgB,MAAQjB,EAAQiB,MAAQX,EAAAC,EAAAC,cAAA,WAAMP,EAAOgB,QCD7CU,EAAW,CACf,CACEJ,GAAI,EACJN,KAAM,QACNf,MAAO,QACP0B,UAAW,QAEb,CACEL,GAAI,EACJN,KAAM,YACNf,MAAO,OACP0B,UAAW,QAEb,CACEL,GAAI,EACJN,KAAM,WACNf,MAAO,WACP0B,UAAW,QAEb,CACEL,GAAI,EACJN,KAAM,SACNf,MAAO,SACP0B,UAAW,QAEb,CACEL,GAAI,EACJN,KAAM,WACNf,MAAO,SACP0B,UAAW,WAITC,EAAgBC,mBAASC,MAAM,CACnC7B,MAAO8B,mBACJC,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,UAAWJ,mBACRC,IAAI,EAAG,cACPC,IAAI,IAAK,aACTC,SAAS,cAiECxC,UA9DD,SAAAC,GAAiD,IAA9CyC,EAA8CzC,EAA9CyC,QAASC,EAAqC1C,EAArC0C,OAAQC,EAA6B3C,EAA7B2C,UAAWC,EAAkB5C,EAAlB4C,YAC3C,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEC,oBAAkB,EAClBC,cAAeL,EACfM,iBAAkBf,EAiBlBgB,SAAQ,eAAAC,EAAA1C,OAAA2C,EAAA,EAAA3C,CAAA4C,EAAAzC,EAAA0C,KAAE,SAAAC,EAAOC,EAAQC,GAAf,OAAAJ,EAAAzC,EAAA8C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACRjB,EAAUY,EAAQC,GAASK,KAAKjB,GADxB,wBAAAc,EAAAI,SAAAR,MAAF,gBAAAS,EAAAC,GAAA,OAAAd,EAAAe,MAAAC,KAAAC,YAAA,GAGRC,OAAQ,SAAAC,GAA4C,IAAzCC,EAAyCD,EAAzCC,aAAcC,EAA2BF,EAA3BE,aAAclE,EAAagE,EAAbhE,OAErC,OADAmE,QAAQC,IAAIpE,GAEVK,EAAAC,EAAAC,cAAA,QAAMqC,SAAUqB,EAAczD,MAAO,CAAEC,QAAS,OAAQE,cAAe,WACrEN,EAAAC,EAAAC,cAAA,YAAOP,EAAOqE,SACb3C,EAASP,IAAI,SAAAC,GAAI,OAChBf,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEnB,IAAKD,EAAKE,GACVN,KAAMI,EAAKJ,KACXf,MAAOmB,EAAKnB,MACZgB,KAAyB,WAAnBG,EAAKO,UAAyBS,EAAU,KAC9CT,UAA8B,SAAnBP,EAAKO,UAAuB2C,EAAYC,MAIvDlE,EAAAC,EAAAC,cAAA,SACEQ,KAAK,SACLG,MAAOmB,EAAOf,GAAK,cAAgB,cACnCkD,SAAUN,uJCpGbO,EAAU,WACrB,sBAAA9E,EAAAQ,OAAA2C,EAAA,EAAA3C,CAAA4C,EAAAzC,EAAA0C,KAAO,SAAAC,EAAMyB,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAA1C,EAAA,OAAAW,EAAAzC,EAAA8C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLmB,EAAS,CAAE3D,KAAMgE,MACjBL,EAAS,CAAE3D,KAAMgE,MAFZ1B,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIsByB,MAAM,iCAJ5B,cAIGL,EAJHtB,EAAA4B,KAAA5B,EAAAE,KAAA,EAKsByB,MAAM,iCAL5B,cAKGJ,EALHvB,EAAA4B,KAAA5B,EAAAE,KAAA,GAMe2B,QAAQC,IAAI,CAACR,EAAYC,IANxC,eAMGC,EANHxB,EAAA4B,KAAA5B,EAAAE,KAAA,GAOmBsB,EAAI,GAAGO,OAP1B,eAOGN,EAPHzB,EAAA4B,KAAA5B,EAAAE,KAAA,GAQmBsB,EAAI,GAAGO,OAR1B,QAQGhD,EARHiB,EAAA4B,KASHP,EAAS,CAAE3D,KAAMgE,IAA4BM,QAASP,IACtDJ,EAAS,CAAE3D,KAAMgE,IAA4BM,QAASjD,IAVnDiB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAiC,GAAAjC,EAAA,SAYHqB,EAAS,CAAE3D,KAAMgE,IAAyBM,QAAOhC,EAAAiC,KACjDZ,EAAS,CAAE3D,KAAMgE,IAAyBM,QAAOhC,EAAAiC,KAb9C,yBAAAjC,EAAAI,SAAAR,EAAA,kBAAP,gBAAAS,GAAA,OAAA/D,EAAAiE,MAAAC,KAAAC,YAAA,IAkBWyB,EAAa,SAAClD,EAAQc,GACjC,sBAAAN,EAAA1C,OAAA2C,EAAA,EAAA3C,CAAA4C,EAAAzC,EAAA0C,KAAO,SAAAwC,EAAMd,GAAN,IAAAe,EAAAZ,EAAA5D,EAAA,OAAA8B,EAAAzC,EAAA8C,KAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,cACDlB,EAAOf,GACToD,EAAS,CAAE3D,KAAMgE,MAEjBL,EAAS,CAAE3D,KAAMgE,MAEnBZ,QAAQC,IAAI/B,GANPqD,EAAApC,KAAA,EAQCmC,EAAM,gCACNpD,EAAOf,KAAImE,EAAG,GAAAlE,OAAMkE,EAAN,KAAAlE,OAAac,EAAOf,KATnCoE,EAAAnC,KAAA,EAUeyB,MAAMS,EAAK,CAC3BE,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQzD,EAAOf,GAAK,MAAQ,OAC5ByE,KAAMC,KAAKC,UAAU5D,KAhBpB,cAUGwC,EAVHa,EAAAT,KAkBH9B,EAAQ+C,eAAc,GACtB/C,EAAQgD,YAnBLT,EAAAnC,KAAA,GAoBgBsB,EAAIO,OApBpB,QAoBGnE,EApBHyE,EAAAT,KAsBHd,QAAQC,IAAInD,GAERoB,EAAOf,GACToD,EAAS,CAAE3D,KAAMgE,IAA6BM,QAASpE,IAEvDyD,EAAS,CAAE3D,KAAMgE,IAA2BM,QAASpE,IA3BpDyE,EAAAnC,KAAA,iBAAAmC,EAAApC,KAAA,GAAAoC,EAAAJ,GAAAI,EAAA,SA8BHvC,EAAQiD,UAAU,CAAE/B,QAAS,aAC7BlB,EAAQ+C,eAAc,GAClB7D,EAAOf,GACToD,EAAS,CAAE3D,KAAMgE,IAA0BM,QAAOK,EAAAJ,KAElDZ,EAAS,CAAE3D,KAAMgE,IAAwBM,QAAOK,EAAAJ,KAnC/C,yBAAAI,EAAAjC,SAAA+B,EAAA,kBAAP,gBAAA7B,GAAA,OAAAd,EAAAe,MAAAC,KAAAC,YAAA,aCdIpE,cACJ,SAAAA,EAAYQ,GAAO,IAAAmG,EAAA,OAAAlG,OAAAmG,EAAA,EAAAnG,CAAA0D,KAAAnE,IACjB2G,EAAAlG,OAAAoG,EAAA,EAAApG,CAAA0D,KAAA1D,OAAAqG,EAAA,EAAArG,CAAAT,GAAA+G,KAAA5C,KAAM3D,KAIRwG,MAAQ,CACNC,MAAM,EACNtE,OAAQ,CACNpC,MAAO,GACPkC,UAAW,GACXyE,SAAU,GACVC,OAAQ,GACRC,SAAU,KAZKT,EAiCnBU,WAAa,WACXV,EAAKW,SAAS,CAAEL,MAAM,KAlCLN,EAqCnBY,WAAa,SAAA5E,GACXgE,EAAKW,SAAS,CAAE3E,SAAQsE,MAAM,KApC9BzG,EAAMuE,UAFW4B,wEAyCV,IAAAa,EAAArD,KAAAsD,EAKHtD,KAAK3D,MAHI4E,EAFNqC,EAELrC,QAAWA,QACA1C,EAHN+E,EAGL/E,QAAWA,QACXE,EAJK6E,EAIL7E,UAJK8E,EAMkBvD,KAAK6C,MAAtBrE,EAND+E,EAMC/E,OAAQsE,EANTS,EAMST,KAChB,OACEtG,EAAAC,EAAAC,cAAA,WAoBEF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASG,MAAM,gBAAgBmG,QAASxD,KAAKkD,aACzD1G,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aACGuE,EAAQ3D,IAAI,SAAAkB,GAAM,OACjBhC,EAAAC,EAAAC,cAAA,MAAIc,IAAKgB,EAAOf,IACdjB,EAAAC,EAAAC,cAAA,MAAI+G,UAAW5H,EAAQ,IAAM,EAAI,YAAc,mBAC5C2C,EAAOpC,OAEVI,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGgH,KAAMlF,EAAOF,WAAhB,SAEF9B,EAAAC,EAAAC,cAAA,UAAK8B,EAAOuE,UACZvG,EAAAC,EAAAC,cAAA,UAAK8B,EAAOwE,QACZxG,EAAAC,EAAAC,cAAA,UAAK8B,EAAOyE,UACZzG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASG,MAAM,OAAOmG,QAAS,kBAAMH,EAAKD,WAAW5E,YAM3EhC,EAAAC,EAAAC,cAAA,UAAQoG,KAAMA,GACZtG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASsG,QAAS,kBAAMH,EAAKF,SAAS,CAAEL,MAAM,KAAUzF,MAAM,UAC1Eb,EAAAC,EAAAC,cAACiH,EAAA,QAAD,CACEpF,QAASA,EACTC,OAAQA,EACRC,UAAWA,EACXC,YAAa,kBAAM2E,EAAKF,SAAS,CAAEL,MAAM,iBA5GnCc,aAyILC,sBAhBf,SAAyBhB,GACvB,MAAO,CACLiB,OAAQjB,EAAMiB,OACdvF,QAASsE,EAAMtE,QACf0C,QAAS4B,EAAM5B,UAInB,SAA4BJ,GAC1B,MAAO,CACLkD,aAAc,kBAAMlD,EAAS,CAAE3D,KAAM,gBAAiBsE,QAAS,CAAEsC,OAAQ,cACzElD,QAAS,kBAAMA,IAAUC,IACzBpC,UAAW,SAACD,EAAQc,GAAT,OAAqBoC,EAAWlD,EAAQc,EAAnBoC,CAA4Bb,MAIjDgD,CAGbhI","file":"static/js/4.e7a9e2d8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst index = ({ field, form: { touched, errors }, title, ...props }) => {\n  return (\n    <div style={{ display: 'flex', flex: 1, flexDirection: 'column', margin: 10 }}>\n      <label htmlFor=\"title\">{title}</label>\n      <input type=\"text\" {...field} {...props} />\n      {errors.name && touched.name && <div>{errors.name}</div>}\n    </div>\n  );\n};\n\nindex.propTypes = {\n  field: PropTypes.object.isRequired,\n  form: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default index;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst index = ({ field, form: { touched, errors }, data, title, ...props }) => {\n  return (\n    <div style={{ display: 'flex', flex: 1, flexDirection: 'column', margin: 10 }}>\n      <label htmlFor=\"title\">{title}</label>\n      <select {...field} {...props}>\n        <option value=\"\">Select Author</option>\n        {data &&\n          data.map(item => (\n            <option key={item.id} value={item.id}>{`${item.firstName} ${item.lastName}`}</option>\n          ))}\n      </select>\n      {errors.name && touched.name && <div>{errors.name}</div>}\n    </div>\n  );\n};\n\nindex.propTypes = {\n  field: PropTypes.object.isRequired,\n  form: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default index;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Field } from 'formik';\nimport { string, object } from 'yup';\nimport TextInput from '../../component/TextInput';\nimport DropDown from '../../component/DropDown';\n\n// https://github.com/jaredpalmer/formik\n\n// https://github.com/erikras/redux-form\n\n// https://www.npmjs.com/package/yup\n\nconst formData = [\n  {\n    id: 1,\n    name: 'title',\n    title: 'Title',\n    component: 'text',\n  },\n  {\n    id: 2,\n    name: 'watchHref',\n    title: 'Link',\n    component: 'text',\n  },\n  {\n    id: 3,\n    name: 'category',\n    title: 'Category',\n    component: 'text',\n  },\n  {\n    id: 4,\n    name: 'length',\n    title: 'Length',\n    component: 'text',\n  },\n  {\n    id: 5,\n    name: 'authorId',\n    title: 'Author',\n    component: 'select',\n  },\n];\n\nconst CoursesSchema = object().shape({\n  title: string()\n    .min(5, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  watchHref: string()\n    .min(2, 'Too Short!')\n    .max(200, 'Too Long!')\n    .required('Required'),\n});\n\nconst index = ({ authors, course, addCourse, closeDialog }) => {\n  return (\n    <div>\n      <h2>Add Courses</h2>\n      <Formik\n        enableReinitialize\n        initialValues={course}\n        validationSchema={CoursesSchema}\n        // validate={values => {\n        //   let errors = {};\n        //   if (!values.title) {\n        //     errors.title = \"Required\";\n        //   }\n        //   if (!values.watchHref) {\n        //     errors.watchHref = \"Required\";\n        //   }\n        //   if (!values.length) {\n        //     errors.length = \"Required\";\n        //   }\n        //   if (!values.category) {\n        //     errors.category = \"Required\";\n        //   }\n        //   return errors;\n        // }}\n        onSubmit={async (values, actions) => {\n          addCourse(values, actions).then(closeDialog);\n        }}\n        render={({ handleSubmit, isSubmitting, errors }) => {\n          console.log(errors);\n          return (\n            <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column' }}>\n              <span>{errors.apiFail}</span>\n              {formData.map(item => (\n                <Field\n                  key={item.id}\n                  name={item.name}\n                  title={item.title}\n                  data={item.component === 'select' ? authors : null}\n                  component={item.component === 'text' ? TextInput : DropDown}\n                />\n              ))}\n\n              <input\n                type=\"submit\"\n                value={course.id ? 'Edit Course' : 'Save Course'}\n                disabled={isSubmitting}\n              />\n            </form>\n          );\n        }}\n      />\n    </div>\n  );\n};\n\nindex.propTypes = {\n  authors: PropTypes.array.isRequired,\n  course: PropTypes.object.isRequired,\n  addCourse: PropTypes.func.isRequired,\n  closeDialog: PropTypes.func.isRequired,\n};\n\nexport default index;\n","import * as types from '../constants/actionTypes';\n\nexport const getData = () => {\n  return async dispatch => {\n    dispatch({ type: types.LOAD_COURSES });\n    dispatch({ type: types.LOAD_AUTHORS });\n    try {\n      const coursesApi = await fetch('http://localhost:3004/courses');\n      const authorsApi = await fetch('http://localhost:3004/authors');\n      const res = await Promise.all([coursesApi, authorsApi]);\n      const courses = await res[0].json();\n      const authors = await res[1].json();\n      dispatch({ type: types.LOAD_COURSES_SUCCESS, payload: courses });\n      dispatch({ type: types.LOAD_AUTHORS_SUCCESS, payload: authors });\n    } catch (error) {\n      dispatch({ type: types.LOAD_COURSES_FAIL, payload: error });\n      dispatch({ type: types.LOAD_AUTHORS_FAIL, payload: error });\n    }\n  };\n};\n\nexport const saveCourse = (course, actions) => {\n  return async dispatch => {\n    if (course.id) {\n      dispatch({ type: types.UPDATE_COURSE });\n    } else {\n      dispatch({ type: types.SAVE_COURSE });\n    }\n    console.log(course);\n    try {\n      let url = 'http://localhost:3004/courses';\n      if (course.id) url = `${url}/${course.id}`;\n      const res = await fetch(url, {\n        headers: {\n          accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        method: course.id ? 'PUT' : 'POST',\n        body: JSON.stringify(course),\n      });\n      actions.setSubmitting(false);\n      actions.resetForm();\n      const data = await res.json();\n\n      console.log(data);\n\n      if (course.id) {\n        dispatch({ type: types.UPDATE_COURSE_SUCCESS, payload: data });\n      } else {\n        dispatch({ type: types.SAVE_COURSE_SUCCESS, payload: data });\n      }\n    } catch (error) {\n      actions.setErrors({ apiFail: 'Api FaIL' });\n      actions.setSubmitting(false);\n      if (course.id) {\n        dispatch({ type: types.UPDATE_COURSE_FAIL, payload: error });\n      } else {\n        dispatch({ type: types.SAVE_COURSE_FAIL, payload: error });\n      }\n    }\n  };\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getData, saveCourse } from '../../actions/coursesAction';\nimport Users from '../Users';\n// import { LocaleConsumer } from '../../context/localeContext';\n// import { ThemeConsumer } from '../../context/themeContext';\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n    props.getData();\n  }\n\n  state = {\n    open: false,\n    course: {\n      title: '',\n      watchHref: '',\n      authorId: '',\n      length: '',\n      category: '',\n    },\n  };\n\n  // componentDidMount() {\n  //   this.getCourses();\n  // }\n\n  // getCourses = async () => {\n  //   const coursesApi = await fetch('http://localhost:3004/courses');\n  //   const authorsApi = await fetch('http://localhost:3004/authors');\n  //   const res = await Promise.all([coursesApi, authorsApi]);\n  //   console.log(res);\n  //   const courses = await res[0].json();\n  //   const authors = await res[1].json();\n  //   this.setState({\n  //     courses,\n  //     authors,\n  //   });\n  // };\n\n  addCourses = () => {\n    this.setState({ open: true });\n  };\n\n  editCourse = course => {\n    this.setState({ course, open: true });\n  };\n\n  render() {\n    const {\n      courses: { courses },\n      authors: { authors },\n      addCourse,\n    } = this.props;\n    const { course, open } = this.state;\n    return (\n      <div>\n        {/* <button onClick={this.props.changeLocale}>Chnage Locale</button>\n        \n        <LocaleConsumer>\n          {value => (\n            <div>\n              <span>{value.locale}</span>\n              <button onClick={() => value.changeLocale('spanish')}>Change Locale</button>\n            </div>\n          )}\n        </LocaleConsumer>\n\n        <ThemeConsumer>\n          {value => (\n            <div>\n              <span>{value.theme}</span>\n              <button onClick={() => value.changeTheme('light')}>Change Theme</button>\n            </div>\n          )}\n        </ThemeConsumer> */}\n        <input type=\"button\" value=\"Create Course\" onClick={this.addCourses} />\n        <table>\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Link</th>\n              <th>Author</th>\n              <th>Length</th>\n              <th>Category</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {courses.map(course => (\n              <tr key={course.id}>\n                <td className={index % 2 === 0 ? 'spanStyle' : 'spanStyle title'}>\n                  {course.title}\n                </td>\n                <td>\n                  <a href={course.watchHref}>Link</a>\n                </td>\n                <td>{course.authorId}</td>\n                <td>{course.length}</td>\n                <td>{course.category}</td>\n                <td>\n                  <input type=\"button\" value=\"Edit\" onClick={() => this.editCourse(course)} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <dialog open={open}>\n          <div>\n            <input type=\"button\" onClick={() => this.setState({ open: false })} value=\"Close\" />\n            <Users\n              authors={authors}\n              course={course}\n              addCourse={addCourse}\n              closeDialog={() => this.setState({ open: false })}\n            />\n          </div>\n        </dialog>\n      </div>\n    );\n  }\n}\n\nindex.propTypes = {\n  history: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    locale: state.locale,\n    authors: state.authors,\n    courses: state.courses,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeLocale: () => dispatch({ type: 'CHANGE_LOCALE', payload: { locale: 'spanish' } }),\n    getData: () => getData()(dispatch),\n    addCourse: (course, actions) => saveCourse(course, actions)(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(index);\n"],"sourceRoot":""}